unit UCaptScr;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  ExtDlgs, Buttons, ExtCtrls,printers, jpeg, Clipbrd, ComCtrls, StdCtrls,
  TypInfo;

type
  TCapScrForm = class(TForm)
    pnlTop: TPanel;
    BSave: TSpeedButton;
    BPrint: TSpeedButton;
    SPD: TSavePictureDialog;
    BCapture: TSpeedButton;
    BClear: TSpeedButton;
    BCopy: TSpeedButton;
    pnlLeft: TPanel;
    sbLoad: TSpeedButton;
    ListCapImg: TListView;
    sbClear: TSpeedButton;
    sbDelete: TSpeedButton;
    sbClose: TSpeedButton;
    Splitter1: TSplitter;
    sbFull: TSpeedButton;
    Image: TImage;
    procedure BSaveClick(Sender: TObject);
    procedure BPrintClick(Sender: TObject);
    procedure BCaptureClick(Sender: TObject);
    procedure BClearClick(Sender: TObject);
    procedure BCopyClick(Sender: TObject);
    procedure sbLoadClick(Sender: TObject);
    procedure ClearList(Path: String; List: TListView);
    procedure DelFile(Path: String; List: TListView; index: integer);
    procedure FindFiles(Path, FileName: String; List: TListView);
    procedure FormDestroy(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Capture;
    procedure ListCapImgClick(Sender: TObject);
    procedure sbClearClick(Sender: TObject);
    procedure sbDeleteClick(Sender: TObject);
    procedure sbCloseClick(Sender: TObject);
    procedure ListCapImgKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure sbFullClick(Sender: TObject);
  end;

var
  CapScrForm: TCapScrForm;
  JPEG:TJPEGImage;

implementation

uses globals, UMain;

{$R *.DFM}

procedure TCapScrForm.Capture;
var
  bmp: TBitmap;
begin
  Bmp := TBitmap.Create;
 try
    bmp.Width := screen.Width;
    bmp.Height := screen.Height;
    BitBlt(bmp.Canvas.Handle, 0, 0, bmp.Width, bmp.Height,
      GetDC(GetDesktopWindow), 0, 0, SrcCopy);
    Image.Picture.Bitmap := bmp;
 finally
    bmp.Free
 end;
end;

procedure TCapScrForm.ClearList(Path: String; List: TListView);
var
  i: integer;
begin
  for i:=0 to List.Items.Count -1 do
    DeleteFile(Path + List.Items[i].Caption);
  List.Clear;
  Image.Picture := nil;
end;

procedure TCapScrForm.DelFile(Path: String; List: TListView; index: integer);
begin
  DeleteFile(Path + List.Items[index].Caption);
  List.Items[index].Delete;
end;

procedure TCapScrForm.FindFiles(Path, FileName: String; List: TListView);
var
  FileSR{, DirSr}: TSearchRec;
  Result: Integer;
  NewItem: TListItem;

 { function DirectoryNotation(Dir: String): Boolean;
  begin
    result := (Dir = '.') or (Dir = '..');
  end;
  }
  function CreationTime (f: TSearchRec) : TDateTime;
  var
    LTime : TFileTime;
    Systemtime : TSystemtime;
  begin
    FileTimeToLocalFileTime( f.FindData.ftCreationTime, LTime);
    FileTimeToSystemTime( LTime, SystemTime );
    result := SystemTimeToDateTime( SystemTime);
  end;

begin
  List.Clear;
  Path := AddSlash(Path);
  Result := FindFirst(Path + FileName, faAnyFile + faHidden + faSysFile +
    faReadOnly, FileSR);
  try
    while Result = 0 do
      with NewItem do
        begin
          NewItem := List.Items.Add;
          Caption := FileSR.Name;
          SubItems.Add(inttostr(FileSR.Size));
          SubItems.Add(DateToStr(CreationTime(FileSR)));
          SubItems.Add(TimeToStr(CreationTime(FileSR)));
          Result := FindNext(FileSR);
        end;
    {Result := FindFirst(Path + '*.*', faDirectory, DirSR);
    while Result = 0 do
    begin
      if ((DirSR.Attr and faDirectory) = faDirectory) and not
        DirectoryNotation(DirSR.Name) then
        FindFiles(Path + DirSR.Name, FileName, ListCapImg);
      Result := FindNext(DirSR);
    end;   }
  finally
    FindClose(FileSR);
  end;
end;

procedure TCapScrForm.BSaveClick(Sender: TObject);
begin
 SPD.DefaultExt:=GraphicExtension(TBitmap);
 if spd.Execute then
  image.Picture.SaveToFile(spd.filename)
end;

procedure TCapScrForm.BPrintClick(Sender: TObject);
begin
 with printer do
  begin
   BeginDoc;
   Canvas.TextOut(10,10,'This page is Generated by '+Application.Title+' !!');
   Canvas.Draw((PageWidth-image.Width)div 2,(PageHeight-image.Height)div 2,image.Picture.Graphic);
   EndDoc
  end
end;

procedure TCapScrForm.BCaptureClick(Sender: TObject);
begin
  Hide;
  Sleep(1000);
  BCapture.Enabled:=false;
  Screen.Cursor := crHourGlass;
  Capture;
  Screen.Cursor := crDefault;
  BCapture.Enabled:=true;
  Show
end;

procedure TCapScrForm.BClearClick(Sender: TObject);
begin
 image.Picture := nil
end;

procedure TCapScrForm.BCopyClick(Sender: TObject);
begin
 Clipboard.Assign(Image.Picture)
end;

procedure TCapScrForm.sbLoadClick(Sender: TObject);
begin
  sbLoad.Enabled := false;
  Screen.Cursor := crHourGlass;
  FindFiles(GetTmpDir, '*.tmp', ListCapImg);
  Screen.Cursor := crDefault;
  sbLoad.Enabled := true;
end;

procedure TCapScrForm.FormDestroy(Sender: TObject);
begin
  JPEG.free;
  PCCMainForm.ShowApp;
 // PCCMainForm.Show;
end;

procedure TCapScrForm.FormCreate(Sender: TObject);
begin
  PCCMainForm.HideApp;
 // PCCMainForm.Hide;
  JPEG := TJPEGImage.Create;
  sbLoadClick(nil);
end;

procedure TCapScrForm.ListCapImgClick(Sender: TObject);
begin
  if ListCapImg.ItemIndex < 0 then Exit;
  try
    JPEG.LoadFromFile(GetTmpDir + ListCapImg.Items.Item[ListCapImg.ItemIndex].Caption);
    Image.Picture.Assign(JPEG);
  except
  end;
end;

procedure TCapScrForm.sbClearClick(Sender: TObject);
begin
  if MessageDlg('Do you want to clear the list ?', mtConfirmation,
    [mbYes, mbNo], 0) = mrNo then exit;
  sbClear.Enabled := false;
  Screen.Cursor := crHourGlass;
  ClearList(GetTmpDir, ListCapImg);
  Screen.Cursor := crDefault;
  sbClear.Enabled := true;
end;

procedure TCapScrForm.sbDeleteClick(Sender: TObject);
var
  index: integer;
begin
  index := ListCapImg.ItemIndex;
  if index < 0 then Exit;
  if MessageDlg('Do you want to delete "' + ListCapImg.Items[index].Caption + '" ?', mtConfirmation,
    [mbYes, mbCancel], 0) = mrCancel then exit;
  sbDelete.Enabled := false;
  Screen.Cursor := crHourGlass;
  DelFile(GetTmpDir, ListCapImg, index);
  Screen.Cursor := crDefault;
  sbDelete.Enabled := true;
end;

procedure TCapScrForm.sbCloseClick(Sender: TObject);
begin
  Close
end;

procedure TCapScrForm.ListCapImgKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if(key in [VK_Up, VK_Down, VK_Return]) then
    ListCapImgClick(nil);
end;

procedure TCapScrForm.sbFullClick(Sender: TObject);
begin
  case pnlLeft.Visible of
    false:
      begin
        BorderStyle := bsSingle;
        sbFull.Caption := '&Full Screen';
        Width := 600;
        Height := 400;
        Position := poScreenCenter;
        pnlLeft.Visible := true;
        pnlTop.Visible := true;
        Splitter1.Visible := true;
      end;
    true:
      begin
        sbFull.Caption := '&Normal Screen';
        pnlLeft.Visible := false;
        pnlTop.Visible := false;
        Splitter1.Visible := false;        
        BorderStyle := bsNone;
        Top:=0; Left := 0;
        Width := Screen.Width;
        Height := Screen.Height;
      end;
  end;
end;

end.


